plugins {
    id 'fabric-loom' version '1.3.10'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Référentiels Maven pour les dépendances
    maven { url 'https://maven.neoforged.net/releases/' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url 'https://cursemaven.com' }
    mavenCentral()
}

dependencies {
    // Minecraft et mappings
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    
    // Fabric loader et API
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // Ajoutez ici d'autres dépendances spécifiques à votre mod
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

// Configurer les options de mémoire pour le test
test {
    minHeapSize = "256m"
    maxHeapSize = "512m"
    jvmArgs = ['-Xmx512m']
}

// Options mémoire globales pour toutes les exécutions Java
allprojects {
    tasks.withType(JavaExec) {
        jvmArgs = ['-Xmx512m', '-XX:MaxMetaspaceSize=256m']
    }
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// Configuration de publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        // Ajoutez ici des dépôts pour publier
    }
}